---
- assert: { that: "ansible_os_family | match('Debian') or ansible_os_family | match('RedHat') or ansible_lsb.id == 'CoreOS'" }

- name: create /tmp/<clustername>
  file:
    path: "{{ flocker_local_tempdir }}"
    state: directory
  delegate_to: 127.0.0.1
  run_once: true

- name: "check if cluster certs exist"
  stat: "path={{ flocker_local_tempdir }}/cluster.crt"
  delegate_to: 127.0.0.1
  register: cluster_crt
  run_once: true

- name: "check if control certs exist"
  stat: "path={{ flocker_local_tempdir }}/control-{{ inventory_hostname }}.key"
  delegate_to: 127.0.0.1
  register: control_crt
  run_once: true

- name: "check if api certs exist"
  stat: "path={{ flocker_local_tempdir }}/{{ flocker_api_cert_name }}.key"
  delegate_to: 127.0.0.1
  register: api_crt
  run_once: true

- name: flocker-ca initialize
  shell: "flocker-ca initialize {{ flocker_cluster_name }}"
  args:
    chdir: "{{ flocker_local_tempdir }}"
  delegate_to: 127.0.0.1
  when: cluster_crt.stat.exists == False
  run_once: true

- name: flocker-ca create-control-certificate
  shell: "flocker-ca create-control-certificate {{ inventory_hostname }}"
  args:
    chdir: "{{ flocker_local_tempdir }}"
  delegate_to: 127.0.0.1
  when: control_crt.stat.exists == False
  run_once: true

- name: create API cert
  shell: "flocker-ca create-api-certificate {{ flocker_api_cert_name }}"
  args:
    chdir: "{{ flocker_local_tempdir }}"
  delegate_to: 127.0.0.1
  when: api_crt.stat.exists == False
  run_once: true

- name: copy API cert.crt to the control node
  copy:
    src: "{{ flocker_local_tempdir }}/{{ flocker_api_cert_name }}.crt"
    dest: /etc/flocker/{{ flocker_api_cert_name }}.crt
  sudo: yes
  run_once: true

- name: copy API cert.key to the control node
  copy:
    src: "{{ flocker_local_tempdir }}/{{ flocker_api_cert_name }}.key"
    dest: /etc/flocker/{{ flocker_api_cert_name }}.key
  sudo: yes
  run_once: true

- name: copy cluster.crt to the control node
  copy:
    src: "{{ flocker_local_tempdir }}/cluster.crt"
    dest: /etc/flocker/cluster.crt
  sudo: yes
  run_once: true

- name: copy control key to the control node
  copy:
    src: "{{ flocker_local_tempdir }}/control-{{ inventory_hostname }}.key"
    dest: /etc/flocker/control-service.key
    mode: 0600
  sudo: yes
  run_once: true

- name: copy control cert to the control node
  copy:
    src: "{{ flocker_local_tempdir }}/control-{{ inventory_hostname }}.crt"
    dest: /etc/flocker/control-service.crt
  sudo: yes
  run_once: true
  register: control_cert

- name: restart flocker-control after control cert changed
  sudo: yes
  notify:
    - restart flocker-control
  run_once: true
  when: control_cert.changed

- name: Flocker Control API port
  lineinfile:
    dest: /etc/services
    line: 'flocker-control-api	4523/tcp	# Flocker Control API port'
  sudo: yes
  when: ansible_os_family == 'Debian' or ansible_os_family == 'RedHat'
  run_once: true

- name: Flocker Control Agent port
  lineinfile:
    dest: /etc/services
    line: 'flocker-control-agent	4524/tcp	# Flocker Control Agent port'
  sudo: yes
  when: ansible_os_family == 'Debian' or ansible_os_family == 'RedHat'
  run_once: true

- name: setup flocker-control runlevels
  copy: src=flocker-control.override dest=/etc/init/flocker-control.override
  sudo: yes
  when: ansible_os_family == 'Debian' or ansible_os_family == 'RedHat'
  run_once: true

- include: debian_firewall.yml
  when: ansible_os_family == 'Debian'
  run_once: true

- include: centos_firewall.yml
  when: ansible_os_family == 'RedHat'
  run_once: true